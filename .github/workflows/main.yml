name: osdc_backend_workflow

on:
  push:
    branches:
      - main
      - develop

jobs:
#  tests:
#    runs-on: ubuntu-latest
#    steps:
#    - name: Check out code
#      uses: actions/checkout@v3
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.11
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install flake8==6.1.0
#        pip install -r ./backend/requirements.txt
#    - name: Test with flake8
#      run: |
#        python -m flake8 backend/

  deploy:
    runs-on: ubuntu-latest
#    needs:
#      - tests
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Remove old version on remote server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          sudo rm -rf /home/${{ secrets.USER }}/app

    - name: Uploading project files to remote server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "backend/, frontend/, infra/"
        target: /home/${{ secrets.USER }}/app

    - name: Building Docker image on remote server and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          cd /home/${{ secrets.USER }}/app/infra
          sudo rm -f .env
          touch .env

          echo DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo CSRF_TRUSTED="${{ secrets.HOST }}" >> .env

          echo DB_ENGINE="django.db.backends.postgresql" >> .env
          echo DB_NAME="${{ secrets.POSTGRES_USER }}" >> .env
          echo POSTGRES_USER="${{ secrets.POSTGRES_USER }}" >> .env
          echo POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo DB_HOST="db" >> .env
          echo DB_PORT="${{ secrets.DB_PORT }}" >> .env

#          echo ADMIN_USERNAME="${{ secrets.ADMIN_USERNAME }}" >> .env
#          echo ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}" >> .env
#          echo ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}" >> .env
#          echo ADMIN_FIRSTNAME="${{ secrets.ADMIN_FIRSTNAME }}" >> .env
#          echo ADMIN_LASTNAME="${{ secrets.ADMIN_LASTNAME }}" >> .env

          sudo docker compose stop
          sudo docker compose rm backend -f
          sudo docker compose up --build -d --force-recreate